<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	">

	<!-- 读数据源 -->
	<bean id="readDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${read.jdbc.driverClassName}">
		</property>
		<property name="url" value="${read.jdbc.url}"></property>
		<property name="username" value="${read.jdbc.username}"></property>
		<property name="password" value="${read.jdbc.password}"></property>
		<!-- 初始化连接 -->
		<property name="initialSize" value="${read.jdbc.initialSize}"></property>
		<!-- 最大连接数量 -->
		<property name="maxActive" value="${read.jdbc.maxActive}"></property>
		<!-- 最大空闲连接 -->
		<property name="maxIdle" value="${read.jdbc.maxIdle}"></property>
		<!-- 最小空闲连接 -->
		<property name="minIdle" value="${read.jdbc.minIdle}"></property>
		<!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于6秒 -->
		<property name="maxWait" value="${read.jdbc.maxWait}"></property>
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true"></property>
		<!-- 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="180"></property>
		<!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true"></property>
	</bean>

	<!-- 写数据源 -->
	<bean id="writeDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${write.jdbc.driverClassName}">
		</property>
		<property name="url" value="${write.jdbc.url}"></property>
		<property name="username" value="${write.jdbc.username}"></property>
		<property name="password" value="${write.jdbc.password}"></property>
		<!-- 初始化连接 -->
		<property name="initialSize" value="${write.jdbc.initialSize}"></property>
		<!-- 最大连接数量 -->
		<property name="maxActive" value="${write.jdbc.maxActive}"></property>
		<!-- 最大空闲连接 -->
		<property name="maxIdle" value="${write.jdbc.maxIdle}"></property>
		<!-- 最小空闲连接 -->
		<property name="minIdle" value="${write.jdbc.minIdle}"></property>
		<!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于6秒 -->
		<property name="maxWait" value="${write.jdbc.maxWait}"></property>
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true"></property>
		<!-- 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="180"></property>
		<!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true"></property>
	</bean>

	<!-- 动态数据源 
	<bean id="dataSource" class="com.kings.ttp.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map>
				<entry key="write" value-ref="writeDataSource" />
				<entry key="read" value-ref="readDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="readDataSource" />
	</bean>
	-->

	<!-- 前置通知 
	<bean id="ba" class="com.kings.ttp.datasource.BeforeAdvice" />
	<aop:config proxy-target-class="true">
		<aop:aspect ref="ba">
			<aop:pointcut id="update"
				expression="execution(* org.springframework.jdbc.core.JdbcTemplate.update*(..)) || execution(* org.springframework.jdbc.core.JdbcTemplate.batchUpdate(..))" />

			<aop:before method="setWriteDataSource" pointcut-ref="update" />
		</aop:aspect>
		<aop:aspect ref="ba">
			<aop:before method="setReadDataSource"
				pointcut="execution(* org.springframework.jdbc.core.JdbcTemplate.query*(..)) || execution(* org.springframework.jdbc.core.JdbcTemplate.execute(..))" />
		</aop:aspect>
	</aop:config>
	-->
	
	<!-- 前置通知 -->
	<bean id="ba" class="com.kings.ttp.datasource.BeforeAdvice" />
	<aop:config >
		<aop:aspect ref="ba">
			<aop:pointcut id="update"
				expression="execution(* com.kings.ttp.dao.automated.*.insert*(..)) 
						||  execution(* com.kings.ttp.dao.automated.*.delete*(..))
						||  execution(* com.kings.ttp.dao.automated.*.update*(..))" />
			<aop:before method="setWriteDataSource" pointcut-ref="update" />
			
			<aop:pointcut id="query"
				expression="execution(* com.kings.ttp.dao.automated.*.count*(..)) 
						||  execution(* com.kings.ttp.dao.automated.*.select*(..))
						||  execution(* com.kings.ttp.dao.automated.*.query*(..))" />
			<aop:before method="setReadDataSource" pointcut-ref="query" />
		
		</aop:aspect>
	</aop:config>
	
	<bean id="readSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:com/kings/ttp/dao/automated/*Mapper.xml" />
        <property name="dataSource" ref="readDataSource" />
    </bean>
    
    <bean id="writeSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:com/kings/ttp/dao/automated/*Mapper.xml" />
        <property name="dataSource" ref="writeDataSource" />
    </bean>
    
    
     <bean id="sqlSessionTemplate" class="com.kings.ttp.datasource.CustomSqlSessionTemplate" >
        <constructor-arg ref="readSqlSessionFactory" />
        <property name="targetSqlSessionFactorys">
            <map>     
                <entry value-ref="readSqlSessionFactory" key="read"/>
                <entry value-ref="writeSqlSessionFactory" key="write"/>
            </map> 
        </property>
    </bean>

    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
   		<property name="basePackage" value="com.kings.ttp.dao.automated" />  
   		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
	</bean> 

</beans>